<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trợ Lý FULIS toàn diện</title>
    <!-- Include Tailwind CSS via CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom font and scrollbar styling */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Hide scrollbar for cleaner look */
        .no-scrollbar::-webkit-scrollbar {
            display: none;
        }
        .no-scrollbar {
            -ms-overflow-style: none;  /* IE and Edge */
            scrollbar-width: none;  /* Firefox */
        }
        /* Prose styles for chat bubbles */
        .prose {
            color: inherit;
        }
        .prose strong {
            font-weight: 700;
        }
        .prose ul {
            list-style-type: disc;
            padding-left: 1.5rem;
        }
        .prose li {
            margin-top: 0.25rem;
            margin-bottom: 0.25rem;
        }
        /* Styling for links generated in chat */
        .prose a {
            color: #1d4ed8; /* blue-700 */
            text-decoration: underline;
        }
        .prose a:hover {
            color: #1e40af; /* blue-800 */
        }
        /* Rotate chevron icon */
        .rotate-180 {
            transform: rotate(180deg);
        }
        .transition-transform {
            transition: transform 0.3s ease;
        }
        /* Voice button listening animation */
        .listening svg {
            color: #ef4444; /* red-500 */
            animation: pulse 1.5s infinite;
        }
        @keyframes pulse {
            0%, 100% {
                transform: scale(1);
                opacity: 1;
            }
            50% {
                transform: scale(1.1);
                opacity: 0.7;
            }
        }
    </style>
</head>
<body class="bg-gray-100">

    <div id="chat-container" class="flex flex-col h-screen max-w-4xl mx-auto bg-white shadow-lg">
        <!-- Header -->
        <header class="bg-white shadow-md p-4 flex items-center border-b border-gray-200 flex-shrink-0">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-green-600 mr-3" viewBox="0 0 20 20" fill="currentColor">
                <path d="M11 17a1 1 0 001.447.894l4-2A1 1 0 0017 15V5a1 1 0 00-1.447-.894l-4 2A1 1 0 0011 7v10zM5 17a1 1 0 001.447.894l4-2A1 1 0 0011 15V5a1 1 0 00-1.447-.894l-4 2A1 1 0 005 7v10z" />
            </svg>
            <div>
                <h1 class="text-xl font-bold text-gray-800">Trợ Lý FULIS toàn diện</h1>
                <p class="text-sm text-gray-500">phát triển bởi <a href="https://fulis.vn" target="_blank" rel="noopener noreferrer" class="underline text-green-600 hover:text-green-700 font-medium">fulis.vn</a> và Gemini</p>
            </div>
        </header>
        
        <!-- API Key Settings (Collapsible) -->
        <div class="border-b border-gray-200 bg-gray-50">
            <button id="api-key-toggle" class="w-full flex justify-between items-center p-3 text-left font-medium text-gray-700">
                <span>Cài đặt API Key</span>
                <svg id="api-key-chevron" class="w-5 h-5 text-gray-500 transition-transform" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
            </button>
            <div id="api-key-content" class="hidden p-4 bg-green-50/50 space-y-4">
                <div>
                    <div class="flex flex-col sm:flex-row sm:items-center gap-3">
                        <label for="api-key-input" class="text-sm font-medium text-gray-700 whitespace-nowrap">API Key Gemini:</label>
                        <input type="password" id="api-key-input" class="flex-grow p-2 border border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500">
                        <button id="save-api-key" class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 shadow-sm">Lưu Key</button>
                        <button id="delete-api-key" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 shadow-sm">Xóa Key</button>
                    </div>
                    <p id="api-key-status" class="text-sm font-medium mt-2"></p>
                    <p class="text-xs text-gray-600 mt-1">Lấy API Key miễn phí tại <a href="https://aistudio.google.com/apikey" target="_blank" rel="noopener noreferrer" class="underline text-blue-600">Google AI Studio</a>.</p>
                </div>
            </div>
        </div>

        <!-- Chat Area -->
        <main id="chat-area" class="flex-1 overflow-y-auto p-4 md:p-6 space-y-6 no-scrollbar relative">
            <!-- Messages will be dynamically inserted here -->
        </main>

        <!-- Input Form -->
        <footer id="chat-footer" class="bg-white border-t p-4 flex-shrink-0">
            <!-- Image Preview Container -->
            <div id="image-preview-container" class="hidden p-2 border-b border-gray-200">
                <!-- Image preview will be dynamically inserted here -->
            </div>
            <div class="flex items-center bg-gray-100 rounded-full p-2">
                <!-- Image Upload Button -->
                <label for="image-upload-input" class="cursor-pointer p-3 rounded-full hover:bg-gray-200 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13" />
                    </svg>
                </label>
                <input type="file" id="image-upload-input" class="hidden" accept="image/*">
                
                <!-- Voice Input Button -->
                <button id="voice-button" class="cursor-pointer p-3 rounded-full hover:bg-gray-200 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z" />
                    </svg>
                </button>

                <textarea
                    id="user-input"
                    class="flex-1 bg-transparent p-2 text-gray-800 placeholder-gray-500 focus:outline-none resize-none no-scrollbar"
                    placeholder="Nhập câu hỏi hoặc tải ảnh lên..."
                    rows="1"
                ></textarea>
                <button
                    id="send-button"
                    class="ml-3 p-3 rounded-full bg-green-600 text-white hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors focus:outline-none focus:ring-2 focus:ring-green-500"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18" />
                    </svg>
                </button>
            </div>
        </footer>
    </div>

    <script type="module">
        // --- DOM Elements ---
        const chatArea = document.getElementById('chat-area');
        const userInput = document.getElementById('user-input');
        const sendButton = document.getElementById('send-button');
        const imageUploadInput = document.getElementById('image-upload-input');
        const imagePreviewContainer = document.getElementById('image-preview-container');
        const apiKeyToggle = document.getElementById('api-key-toggle');
        const apiKeyChevron = document.getElementById('api-key-chevron');
        const apiKeyContent = document.getElementById('api-key-content');
        const apiKeyInput = document.getElementById('api-key-input');
        const saveApiKeyButton = document.getElementById('save-api-key');
        const deleteApiKeyButton = document.getElementById('delete-api-key');
        const apiKeyStatus = document.getElementById('api-key-status');
        const chatFooter = document.getElementById('chat-footer');
        const voiceButton = document.getElementById('voice-button');

        // --- Chat State ---
        let isLoading = false;
        let messages = [];
        let uploadedImageBase64 = null;
        let uploadedImageType = null;
        let geminiApiKey = '';
        let recognition;
        let isListening = false;
        let SYSTEM_PROMPT = ''; // Will be built dynamically

        // --- Hard-coded Knowledge Base ---
        const KNOWLEDGE_BASE_URLS = [
            "https://script.google.com/macros/s/AKfycby2Dk2lf2mkTlX2PUMb5N9pBGe3y_igW-gtPNQ0eIGAhROgIALC4Sh0nSPp_ZDwS42I5Q/exec",
        ];

        // --- Base System Prompt (without dynamic knowledge) ---
        const BASE_SYSTEM_PROMPT = `
        I. VAI TRÒ CỐT LÕI:
        Bạn là AI Agent, một trợ lý chuyên môn của Công ty Sinh thái Nông nghiệp FULIS. Nhiệm vụ của bạn là cung cấp kiến thức chuyên sâu, giải pháp thực tiễn và tư vấn đáng tin cậy về nông nghiệp, đặc biệt là nông nghiệp sinh thái và nông nghiệp tuần hoàn.

        II. MỤC TIÊU HOẠT ĐỘNG:
        Hỗ trợ người dùng, từ người mới bắt đầu đến các chuyên gia, nắm vững và áp dụng thành công các kỹ thuật canh tác tiên tiến, bền vững. Mục tiêu cuối cùng là tối ưu hóa năng suất, nâng cao chất lượng nông sản và thúc đẩy một nền nông nghiệp xanh, hiệu quả tại Việt Nam, tập trung vào việc tạo ra giá trị kinh tế và tiết giảm chi phí sản xuất đầu vào.

        III. LĨNH VỰC CHUYÊN MÔN SÂU:
        Bạn có kiến thức chuyên môn chuẩn và cập nhật về các lĩnh vực sau:
        1.  **Nông nghiệp Sinh thái & Tuần hoàn:** Nguyên tắc cốt lõi, mô hình ứng dụng, quản lý tài nguyên (đất, nước, dinh dưỡng) theo chu trình khép kín, giảm thiểu chất thải và tác động môi trường.
        2.  **Kỹ thuật Canh tác:**
            * **Canh tác trong nhà kính:** Quản lý vi khí hậu, hệ thống tự động, canh tác trên giá thể (thủy canh, khí canh).
            * **Canh tác trên đất:** Cải tạo đất, quản lý sức khỏe đất, làm đất, bón phân hữu cơ, canh tác không làm đất.
        3.  **Dinh dưỡng học Cây trồng:**
            * Nhu cầu dinh dưỡng đa, trung, vi lượng cho từng loại cây và giai đoạn sinh trưởng.
            * Chẩn đoán triệu chứng thiếu/thừa dinh dưỡng.
            * Kiến thức sâu về phân bón vô cơ, hữu cơ, vi sinh. Kỹ thuật ủ phân, sản xuất phân bón hữu cơ tại chỗ.
            * Xây dựng công thức dinh dưỡng cân đối.
        4.  **Quy trình trồng & Chăm sóc:** Cung cấp quy trình chi tiết từ khâu chọn giống, ươm cây, trồng, chăm sóc, đến thu hoạch và bảo quản cho nhiều loại cây trồng khác nhau.
        5.  **Thiết kế Hệ thống Tưới:**
            * Tính toán và thiết kế hệ thống tưới phù hợp với từng loại địa hình, quy mô và cây trồng (tưới nhỏ giọt, tưới phun mưa, tưới ngầm).
            * Tư vấn lựa chọn thiết bị, vật tư và kỹ thuật vận hành, bảo dưỡng hệ thống tưới hiệu quả, tiết kiệm nước.
        6.  **Quản lý Dịch hại Tổng hợp (IPM):** Nhận diện, phòng ngừa và xử lý sâu bệnh hại theo phương pháp an toàn, ưu tiên các biện pháp sinh học, thiên địch và hạn chế tối đa hóa chất.
        7.  **Bối cảnh Nông nghiệp Việt Nam:** Am hiểu về điều kiện khí hậu, thổ nhưỡng, mùa vụ và các loại vật tư nông nghiệp phổ biến tại các vùng miền.

        IV. NHIỆM VỤ & CHỨC NĂNG CHÍNH (CHI TIẾT):
        1.  **Khai thác thông tin & Xác định bối cảnh:** Thay vì chỉ hỏi, hãy chủ động đặt câu hỏi sâu để hiểu rõ mục tiêu của người dùng. Ví dụ: Khi hỏi về hệ thống tưới, hãy hỏi "Hệ thống này dùng cho cây trồng gì, trên quy mô nào, và mục tiêu chính của anh/chị là tiết kiệm nước hay tối ưu năng suất?".
        2.  **Tư duy tổng hợp & Đưa ra giải pháp toàn diện:** Kết nối các lĩnh vực kiến thức. Ví dụ, khi tư vấn về dinh dưỡng, phải cân nhắc nó ảnh hưởng thế nào đến sức đề kháng sâu bệnh và yêu cầu về nước tưới. Cung cấp một cái nhìn tổng quan, cân đối các yếu tố để người dùng hiểu rõ "bức tranh lớn" trước khi hành động.
        3.  **Phân tích Kinh tế & Tối ưu chi phí:** Luôn lồng ghép yếu tố kinh tế vào tư vấn. Gợi ý các giải pháp ứng dụng kinh tế tuần hoàn (tận dụng phụ phẩm, tự làm phân bón...) để giảm chi phí đầu vào. So sánh ưu nhược điểm của các phương án trên khía cạnh chi phí và hiệu quả lâu dài.
        4.  **"Làm mềm" kiến thức & Hướng dẫn thực chiến:** Diễn giải các khái niệm kỹ thuật phức tạp bằng ngôn ngữ đơn giản, dễ hiểu. Chuyển hóa kiến thức thành các bước hành động cụ thể, rõ ràng, có thể áp dụng ngay vào thực tế sản xuất của người nông dân.
        5.  **Chẩn đoán & Giải quyết vấn đề:** Dựa trên hình ảnh và mô tả, đưa ra chẩn đoán sơ bộ về sâu bệnh, thiếu hụt dinh dưỡng và đề xuất giải pháp theo từng bước, ưu tiên các biện pháp sinh thái, an toàn.
        6.  **Giới thiệu Sản phẩm/Dịch vụ FULIS:** Khi phù hợp, hãy giới thiệu các sản phẩm, dịch vụ, hoặc tài liệu kỹ thuật từ FULIS như một giải pháp hỗ trợ cụ thể cho vấn đề của người dùng.

        V. PHONG CÁCH TƯ VẤN & NGUYÊN TẮC CỐT LÕI:
        1.  **Là một Chuyên gia có khả năng lập luận:** Không chỉ đưa ra thông tin, mà phải giải thích "tại sao", so sánh các lựa chọn và giúp người dùng hiểu được logic đằng sau mỗi giải pháp.
        2.  **Mềm dẻo & Linh hoạt:** Cân đối giữa các nguồn kiến thức (sách vở, kinh nghiệm thực tế, dữ liệu khoa học) để đưa ra lời khuyên phù hợp nhất với từng hoàn cảnh cụ thể, không rập khuôn máy móc.
        3.  **Tư duy Kinh tế Tuần hoàn:** Luôn lấy nguyên tắc của nông nghiệp tuần hoàn làm kim chỉ nam, hướng tới việc tạo ra giá trị, giảm chi phí và bảo vệ môi trường.
        4.  **Thực chiến & Rõ ràng:** Mọi tư vấn phải hướng đến hành động cụ thể, dễ áp dụng và mang lại hiệu quả thực tế.
        5.  **Thận trọng & Khách quan:** Luôn nhấn mạnh tính tham khảo của thông tin và khuyến khích người dùng quan sát, kiểm tra thực tế.
        
        VI. NGUỒN TÀI LIỆU THAM KHẢO KỸ THUẬT (FULIS):
        Khi người dùng hỏi về các chủ đề liên quan, bạn có thể tham khảo và trích dẫn các nguồn sau đây để tăng độ tin cậy:
        1.  **Tính toán Phân bón cho Canh tác Giá thể:** "https://www.agri.stnnfulis.com/tinh-toan-phan-bon/canh-tac-gia-the-nha-kinh"
        2.  **Quy trình Canh tác Tối ưu:** "https://www.agri.stnnfulis.com/quy-trinh-trong/canh-tac-toi-uu"
        3.  **Thiết kế Hệ thống tưới chuyên nghiệp:** "https://www.drip.stnnfulis.com/tinh-toan-tuoi-nha-kinh"
        4.  **Thư viện Dinh dưỡng Cây trồng:** "https://www.agri.stnnfulis.com/thu-vien-kien-thuc/thu-vien-dinh-duong-cay-trong"
        5.  **Thư viện Quản lý Dịch hại (IPM):** "https://www.agri.stnnfulis.com/thu-vien-kien-thuc/quan-ly-dich-hai-ipm"

        VII. NGUỒN THAM KHẢO MUA SẢN PHẨM (FULIS):
        Khi người dùng hỏi về việc mua các thiết bị, vật tư, hãy giới thiệu các danh mục sản phẩm sau đây:
        - **Thiết bị tưới nhỏ giọt:** "https://stnnfulis.com/tuoi-nho-giot/"
        - **Trạm bơm, bộ châm phân:** "https://stnnfulis.com/tram-bom-bo-trung-tam/"
        - **Bộ điều khiển tưới tự động:** "https://stnnfulis.com/he-thong-dieu-khien/"
        - **Ống dẫn nước:** "https://stnnfulis.com/ong-tuoi-day-dan-tuoi/"
        - **Van điện từ:** "https://stnnfulis.com/van-dien-tu/"
        - **Phân bón, chế phẩm sinh học:** "https://stnnfulis.com/che-pham-phan-bon-huu-co/"
        `;
        
        // --- Message Templates ---
        const apiKeyNeededMessage = {
            role: 'model',
            isSpecial: true,
            parts: [{
                text: `
                    <div class="text-center p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-green-500 mb-4 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H5v-2H3v-2H1.75a1.75 1.75 0 01-1.75-1.75V6.75A1.75 1.75 0 011.75 5H6a2 2 0 012-2h2a2 2 0 012 2h2a2 2 0 012 2v1" />
                        </svg>
                        <h2 class="text-xl font-bold text-gray-800">Kết nối với Trợ lý FULIS</h2>
                        <p class="text-gray-600 mt-2 max-w-md mx-auto">Vui lòng nhập API Key Gemini cá nhân của bạn vào mục "Cài đặt" ở trên để bắt đầu trò chuyện.</p>
                   </div>`
            }]
        };

        const initialBotMessage = {
            role: 'model',
            parts: [{
                text: `Xin chào! Tôi là Trợ lý chuyên môn của FULIS. Tôi có thể hỗ trợ bạn về những lĩnh vực nào sau đây?\n\n* **Tư vấn cây trồng:** Giải pháp dinh dưỡng, phòng trừ sâu bệnh, quy trình canh tác...\n* **Tư vấn hệ thống tưới:** Thiết kế, tính toán, lựa chọn thiết bị tưới nhỏ giọt, phun mưa...\n* **Tư vấn Farm tuần hoàn:** Xây dựng mô hình nông nghiệp sinh thái, giảm chi phí, tăng hiệu quả.\n* **Tư vấn sản phẩm FULIS:** Các giải pháp tự động hóa, phân bón, vật tư nông nghiệp.\n\nHãy cho tôi biết bạn cần hỗ trợ về vấn đề gì, hoặc bạn có thể tải ảnh lên để tôi phân tích cụ thể hơn!`
            }]
        };
        
        // --- Functions ---
        
        function toggleApiKeySection() {
            apiKeyContent.classList.toggle('hidden');
            apiKeyChevron.classList.toggle('rotate-180');
        }

        function updateChatLock() {
            if (geminiApiKey) {
                chatFooter.classList.remove('opacity-50', 'pointer-events-none');
                userInput.placeholder = "Nhập câu hỏi hoặc tải ảnh lên...";
            } else {
                chatFooter.classList.add('opacity-50', 'pointer-events-none');
                userInput.placeholder = "Vui lòng nhập API Key trong cài đặt để bắt đầu...";
            }
        }

        function saveApiKey() {
            const key = apiKeyInput.value.trim();
            if (key) {
                localStorage.setItem('geminiApiKey', key);
                geminiApiKey = key;
                apiKeyStatus.textContent = 'API Key đã được lưu.';
                apiKeyStatus.className = 'text-sm text-green-700 mt-2';
                updateChatLock();
                if (messages.length === 1 && messages[0].isSpecial) {
                    messages = [initialBotMessage];
                    renderMessages();
                }
                setTimeout(() => apiKeyStatus.textContent = '', 3000);
            } else {
                apiKeyStatus.textContent = 'Vui lòng nhập một API Key hợp lệ.';
                apiKeyStatus.className = 'text-sm text-red-700 mt-2';
            }
        }
        
        function deleteApiKey() {
            localStorage.removeItem('geminiApiKey');
            geminiApiKey = '';
            apiKeyInput.value = '';
            apiKeyStatus.textContent = 'API Key đã được xóa.';
            apiKeyStatus.className = 'text-sm text-red-700 mt-2';
            updateChatLock();
            messages = [apiKeyNeededMessage];
            renderMessages();
            setTimeout(() => apiKeyStatus.textContent = '', 3000);
        }

        function loadApiKey() {
            const defaultKey = 'AIzaSyB2wQ4Xn9yqXnO1Ke9B7GNOUVtbbI4yHIM';
            let savedKey = localStorage.getItem('geminiApiKey');

            if (savedKey) {
                geminiApiKey = savedKey;
                apiKeyInput.value = savedKey;
            } else {
                // If no key is saved, use the default one and save it
                geminiApiKey = defaultKey;
                apiKeyInput.value = defaultKey;
                localStorage.setItem('geminiApiKey', defaultKey);
                apiKeyStatus.textContent = 'Đã tải API Key mặc định. Bạn có thể thay đổi trong Cài đặt.';
                apiKeyStatus.className = 'text-sm text-blue-700 mt-2';
                setTimeout(() => {
                    if (apiKeyStatus.textContent.includes('mặc định')) {
                        apiKeyStatus.textContent = '';
                    }
                }, 5000);
            }
            updateChatLock();
        }

        /**
         * Fetches knowledge from all Google Sheets and builds the system prompt.
         */
        async function buildDynamicSystemPrompt() {
            let knowledgeText = '';
            if (KNOWLEDGE_BASE_URLS.length === 0 || KNOWLEDGE_BASE_URLS[0].includes("YOUR_APPS_SCRIPT_ID")) {
                 SYSTEM_PROMPT = BASE_SYSTEM_PROMPT;
                 apiKeyStatus.textContent = 'Sử dụng cơ sở tri thức mặc định. Cấu hình link API Google Script để cập nhật.';
                 apiKeyStatus.className = 'text-sm text-yellow-600 mt-2';
                 return;
            }

            apiKeyStatus.textContent = `Đang tải cơ sở tri thức từ ${KNOWLEDGE_BASE_URLS.length} nguồn...`;
            apiKeyStatus.className = 'text-sm text-blue-700 mt-2';

            const promises = KNOWLEDGE_BASE_URLS.map(url => 
                fetch(url)
                    .then(res => {
                        if (!res.ok) throw new Error(`Lỗi tải URL: ${res.status} ${res.statusText}`);
                        return res.text(); // Get raw text first
                    })
                    .then(text => {
                        try {
                            return JSON.parse(text); // Try to parse JSON
                        } catch (e) {
                            console.error("Phản hồi không phải là JSON hợp lệ:", text);
                            throw new Error("Dữ liệu trả về từ cơ sở tri thức không đúng định dạng.");
                        }
                    })
            );

            try {
                const results = await Promise.all(promises);
                const allKnowledge = results.flat(); 

                if (!Array.isArray(allKnowledge)) {
                    throw new Error("Dữ liệu cơ sở tri thức không phải là một danh sách.");
                }

                if (allKnowledge.length > 0) {
                    knowledgeText += '\n\nXI. CƠ SỞ TRI THỨC ĐỘNG:\n';
                    allKnowledge.forEach((item, index) => {
                        if (item.Topic && item.URL) { // Assuming headers are 'Topic' and 'URL'
                            knowledgeText += `${index + 1}. **${item.Topic}:** "${item.URL}"\n`;
                        }
                    });
                }
                apiKeyStatus.textContent = `Cơ sở tri thức đã được tải thành công với ${allKnowledge.length} mục.`;
                apiKeyStatus.className = 'text-sm text-green-700 mt-2';
                setTimeout(() => apiKeyStatus.textContent = '', 4000);
            } catch (error) {
                console.error("Lỗi khi tải cơ sở tri thức:", error);
                apiKeyStatus.textContent = `Lỗi: ${error.message}. Sử dụng prompt mặc định.`;
                apiKeyStatus.className = 'text-sm text-red-700 mt-2';
            }
            
            SYSTEM_PROMPT = BASE_SYSTEM_PROMPT + knowledgeText;
        }


        function removeImage() {
            uploadedImageBase64 = null;
            uploadedImageType = null;
            imageUploadInput.value = '';
            imagePreviewContainer.innerHTML = '';
            imagePreviewContainer.classList.add('hidden');
        }
        
        function handleImageUpload(event) {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = (e) => {
                uploadedImageBase64 = e.target.result.split(',')[1];
                uploadedImageType = file.type;
                
                imagePreviewContainer.innerHTML = `
                    <div class="relative inline-block">
                        <img src="${e.target.result}" class="h-24 w-24 object-cover rounded-md border border-gray-300">
                        <button id="remove-image-btn" class="absolute top-0 right-0 -mt-2 -mr-2 bg-gray-800 text-white rounded-full w-6 h-6 flex items-center justify-center text-lg font-bold hover:bg-red-500 transition-colors">&times;</button>
                    </div>
                `;
                imagePreviewContainer.classList.remove('hidden');
                document.getElementById('remove-image-btn').addEventListener('click', removeImage);
            };
            reader.readAsDataURL(file);
        }

        function formatTextToHtml(text) {
            let safeText = text.replace(/</g, '&lt;').replace(/>/g, '&gt;');
            return safeText
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/\n\*\s(.*?)/g, '\n<ul><li class="list-disc ml-4">$1</li></ul>')
                .replace(/<\/ul>\n<ul>/g, '')
                .replace(/\[([^\]]+)\]\((https?:\/\/[^\s\)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" class="text-blue-600 underline hover:text-blue-800">$1</a>')
                .replace(/\n/g, '<br>');
        }

        function renderMessages() {
            chatArea.innerHTML = '';
            messages.forEach(msg => {
                if (msg.isSpecial) {
                    const specialMessageWrapper = document.createElement('div');
                    specialMessageWrapper.innerHTML = msg.parts[0].text;
                    chatArea.appendChild(specialMessageWrapper);
                    return;
                }

                const messageWrapper = document.createElement('div');
                messageWrapper.className = `flex items-end gap-3 ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`;
                
                let avatar = '';
                if (msg.role === 'model') {
                    avatar = `<div class="w-10 h-10 rounded-full bg-green-600 flex items-center justify-center text-white font-bold flex-shrink-0 text-xs">FULIS</div>`;
                } else {
                     avatar = `<div class="w-10 h-10 rounded-full bg-blue-500 flex items-center justify-center text-white font-bold flex-shrink-0 text-sm">Bạn</div>`;
                }

                let textContent = msg.parts.find(part => part.text)?.text || '';
                let imageContent = msg.imageSrc ? `<img src="${msg.imageSrc}" class="mt-2 rounded-lg max-w-xs">` : '';
                let formattedText = formatTextToHtml(textContent);

                const messageBubble = `
                    <div class="max-w-xl p-4 rounded-2xl ${msg.role === 'user' ? 'bg-blue-500 text-white rounded-br-none' : 'bg-white text-gray-800 rounded-bl-none shadow'}">
                        <div class="prose prose-sm max-w-none">${formattedText}</div>
                        ${imageContent}
                    </div>
                `;

                if (msg.role === 'user') {
                    messageWrapper.innerHTML = messageBubble + avatar;
                } else {
                    messageWrapper.innerHTML = avatar + messageBubble;
                }
                
                chatArea.appendChild(messageWrapper);
            });

            if (isLoading) {
                const loadingIndicator = `
                    <div class="flex items-end gap-3 justify-start">
                        <div class="w-10 h-10 rounded-full bg-green-600 flex items-center justify-center text-white font-bold flex-shrink-0 text-xs">FULIS</div>
                        <div class="max-w-xl p-4 rounded-2xl bg-white text-gray-800 rounded-bl-none shadow">
                            <div class="flex items-center space-x-2">
                                <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                                <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse [animation-delay:0.2s]"></div>
                                <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse [animation-delay:0.4s]"></div>
                                <span class="text-sm text-gray-500">Chuyên gia đang phân tích...</span>
                            </div>
                        </div>
                    </div>`;
                chatArea.innerHTML += loadingIndicator;
            }

            chatArea.scrollTop = chatArea.scrollHeight;
        }

        async function handleSendMessage() {
            if (!geminiApiKey) {
                // Using a custom modal/status instead of alert
                apiKeyStatus.textContent = 'Vui lòng nhập API Key của bạn trong phần cài đặt để bắt đầu.';
                apiKeyStatus.className = 'text-sm text-red-700 mt-2';
                apiKeyToggle.click(); // Open the settings
                return;
            }

            const text = userInput.value.trim();
            if (!text && !uploadedImageBase64) return;

            const userMessage = {
                role: 'user',
                parts: [],
                imageSrc: uploadedImageBase64 ? `data:${uploadedImageType};base64,${uploadedImageBase64}` : null
            };
            
            if (text) userMessage.parts.push({ text: text });
            if (uploadedImageBase64) userMessage.parts.push({ inlineData: { mimeType: uploadedImageType, data: uploadedImageBase64 }});
            
            messages.push(userMessage);
            
            userInput.value = '';
            userInput.style.height = 'auto';
            removeImage();
            isLoading = true;
            sendButton.disabled = true;
            renderMessages();

            try {
                const historyForAPI = messages
                    .filter(msg => !msg.isSpecial) 
                    .map(msg => ({
                        role: msg.role,
                        parts: msg.parts
                    }));
                
                const payload = { 
                    contents: historyForAPI,
                    systemInstruction: {
                        parts: [{ text: SYSTEM_PROMPT }]
                    }
                };

                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${geminiApiKey}`;

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    if (response.status === 400 || response.status === 403) {
                         throw new Error(`API Key không hợp lệ hoặc đã hết hạn. Vui lòng kiểm tra lại. Lỗi: ${errorData.error?.message}`);
                    }
                    throw new Error(`Lỗi API: ${response.statusText} - ${errorData.error?.message || 'Lỗi không xác định'}`);
                }

                const result = await response.json();
                
                let botResponseText = "Xin lỗi, tôi chưa thể đưa ra câu trả lời lúc này. Vui lòng thử lại sau.";
                if (result.candidates && result.candidates[0]?.content?.parts?.[0]) {
                     botResponseText = result.candidates[0].content.parts[0].text;
                }
                
                messages.push({ role: 'model', parts: [{ text: botResponseText }] });

            } catch (error) {
                console.error("Error calling Gemini API:", error);
                const errorMessage = { role: 'model', parts: [{ text: `Đã có lỗi xảy ra: ${error.message}` }] };
                messages.push(errorMessage);
                if (error.message.includes("API Key không hợp lệ")) {
                    deleteApiKey();
                }
            } finally {
                isLoading = false;
                sendButton.disabled = false;
                renderMessages();
                userInput.focus();
            }
        }

        // --- Voice Recognition ---
        function isInsideIframe() {
            try {
                return window.self !== window.top;
            } catch (e) {
                return true;
            }
        }

        function setupSpeechRecognition() {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            if (!SpeechRecognition) {
                voiceButton.style.display = 'none';
                return;
            }

            recognition = new SpeechRecognition();
            recognition.lang = 'vi-VN';
            recognition.interimResults = true;
            recognition.continuous = false;

            recognition.onstart = () => {
                isListening = true;
                voiceButton.classList.add('listening');
            };

            recognition.onend = () => {
                isListening = false;
                voiceButton.classList.remove('listening');
            };

            recognition.onresult = (event) => {
                let transcript = '';
                for (let i = event.resultIndex; i < event.results.length; ++i) {
                    transcript += event.results[i][0].transcript;
                }
                userInput.value = transcript;
                userInput.style.height = 'auto';
                userInput.style.height = `${userInput.scrollHeight}px`;
            };

            recognition.onerror = (event) => {
                console.error('Speech recognition error:', event.error);
                isListening = false;
                voiceButton.classList.remove('listening');
                if (event.error === 'not-allowed' || event.error === 'service-not-allowed') {
                    // This error is handled by the iframe check
                } else if (event.error !== 'aborted' && event.error !== 'no-speech') {
                     // Using a custom modal/status instead of alert
                     apiKeyStatus.textContent = `Lỗi nhận dạng giọng nói: ${event.error}`;
                     apiKeyStatus.className = 'text-sm text-red-700 mt-2';
                }
            };
        }

        function handleVoiceButtonClick() {
            if (isInsideIframe()) {
                 // Using a custom modal/status instead of alert
                 apiKeyStatus.textContent = 'Chức năng giọng nói không được hỗ trợ khi nhúng vào website khác. Vui lòng mở trong tab mới.';
                 apiKeyStatus.className = 'text-sm text-yellow-600 mt-2';
                return;
            }
            if (!recognition) return;
            
            if (isListening) {
                recognition.stop();
            } else {
                try {
                    recognition.start();
                } catch (e) {
                    console.error("Could not start recognition:", e);
                    isListening = false;
                    voiceButton.classList.remove('listening');
                }
            }
        }

        // --- Initial Load ---
        async function initializeChat() {
            loadApiKey();
            await buildDynamicSystemPrompt(); // Wait for the prompt to be built
            
            if (!geminiApiKey) {
                messages = [apiKeyNeededMessage];
            } else if (messages.length === 0) {
                messages = [initialBotMessage];
            }
            renderMessages();
            setupSpeechRecognition();
        }

        // --- Event Listeners ---
        apiKeyToggle.addEventListener('click', toggleApiKeySection);
        saveApiKeyButton.addEventListener('click', saveApiKey);
        deleteApiKeyButton.addEventListener('click', deleteApiKey);
        sendButton.addEventListener('click', handleSendMessage);
        voiceButton.addEventListener('click', handleVoiceButtonClick);
        userInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                handleSendMessage();
            }
        });
        userInput.addEventListener('input', () => {
            userInput.style.height = 'auto';
            userInput.style.height = `${userInput.scrollHeight}px`;
        });
        imageUploadInput.addEventListener('change', handleImageUpload);

        initializeChat();

    </script>
</body>
</html>
